$(window).scroll(function () {
    var scrollLifex = $(window).scrollTop();
    if (scrollLifex >= 10) {
      $(".header__wrapper").addClass("active");
    } else {
      $(".header__wrapper").removeClass("active");
    }
  });
  
  
  (function () {
    "use strict";
  
    function validateName(value) {
      return /^[a-zA-Z]+$/.test(value);
    }
    function validatefullName(value) {
      return /^[^\s][a-zA-Z\s]*$/.test(value);
  }
    function validatePhoneNumber(value) {
      return /^\d{10}$/.test(value);
    }
    function validateEmail(value) {
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);
    }
    function validateNotEmpty(value) {
      return value.trim() !== "";
    }
    function validateUpload(fileInput) {
      return fileInput.files.length > 0;
    }
    function validateExperince(value) {
      const intValue = parseInt(value, 10);
      return Number.isInteger(intValue) && intValue >= 1 && intValue <= 50;
    }
    function updateValidationStatus(element, isValid) {
      element.classList.remove("is-valid", "is-invalid");
      if (!isValid) {
        element.classList.add("is-invalid");
      }
    }
  
    var forms = document.querySelectorAll(".needs-validation");
  
    Array.from(forms).forEach(function (form) {
      form.addEventListener("input", function (event) {
        var target = event.target;
  
        switch (target.name) {
          case "first-name":
          case "last-name":
            updateValidationStatus(target, validateName(target.value));
            break;
          case "phone-num":
            updateValidationStatus(target, validatePhoneNumber(target.value));
            break;
            case "full-name":
            updateValidationStatus(target, validatefullName(target.value));
            break;
          case "email":
            updateValidationStatus(target, validateEmail(target.value));
            break;
          case "company":
            case "role":
              updateValidationStatus(target, validateNotEmpty(target.value));
              break;
          case "country":
            updateValidationStatus(target, validateNotEmpty(target.value));
            break;
            case "experience":
            updateValidationStatus(target, validateExperince(target.value));
            break;
          case "resume":
            updateValidationStatus(target, validateUpload(target));
            break;
          case "coverLetter":
            console.log(target);
            updateValidationStatus(target, validateUpload(target));
            break;
          case "agreeCheckbox":
            updateValidationStatus(target, target.checked);
            break;
          default:
            target.checkValidity();
        }
      });
  
      form.addEventListener(
        "submit",
        function (event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
          }
  
          form.classList.add("was-validated");
          
        },
        false
      );
    });
  })();
  
  AOS.init();
  
  
  
  
  